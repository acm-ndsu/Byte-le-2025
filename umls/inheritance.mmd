---
title:  Services UML Diagram
---
classDiagram
    class BaseModel["Pydantic.BaseModel"]

    class GameState {
        - States : dict~str,State~
        + EditState(key_uuid: str, value_managed_state: State) bool
    }

    class State {
        + uuid : str
    }

    class InventoryState {
        + held_item_index: int
        + items: list~Item | None~
        + size: int
    }

    class EntityServiceState {
        + entities: list~Entity~

        + get_closest_entity_to_vector(pos: Vector) Entity
    }

    class InventoryServiceState {
        + inventories_for_player_uuid: dict~str,InventoryState~

        + get_inventory_for_player(self, player_uuid: str) InventoryState
    }


    class Controller {
        + handle_actions(self, action: ActionType, client: Player, world: GameState, Services: list~Service~) None
    }

    class InventoryController

    class MasterController {
        - Services: list~Service~
    }


    class Service{
        + state: State

        + tick(self, world: GameState)
        + grab_state_from_gamestate(self, gamestate: GameState) bool
    }


    class InventoryService {
        + state: InventoryServiceState

        + __init__(self, player_uuids: list~str~) InventoryService

        + give(self, items: list~Item~ | None, player_uuid: str) bool
        + take(self, items: list~Item~ | None, player_uuid: str) bool
        + steal(self, items: list~Item~ | None, from_player_uuid: str, to_player_uuid: str) bool

        + get_inventory_for_player(self, player_uuid: str) InventoryState
        - create_inventories_for_players(self, players_uuids: list~str~) bool
    }

    class EntityService {
            + state: EntityServiceState
            + get_nearest_avatar_to_entity(self, gamestate: GameState, entity: Entity) Avatar
    }



    Service <|-- InventoryService
    Service <|-- EntityService

    Controller <|-- InventoryController
    Controller <|-- MasterController

    State <|-- InventoryServiceState
    State <|-- InventoryState
    State <|-- EntityServiceState
    BaseModel <|-- State
    BaseModel <|-- GameState


    InventoryService <.. InventoryServiceState
    EntityService <.. EntityServiceState

    MasterController <.. InventoryController
    MasterController <.. InventoryService
    MasterController <.. EntityService
    InventoryController <.. InventoryService
    InventoryController <.. EntityService

    InventoryServiceState <.. InventoryState
    GameState <.. InventoryServiceState
    GameState <.. EntityServiceState
    MasterController <.. GameState

    note for Service "Call Services tick every turn in master controller, not for every client"
    note for Service "Services have a number of helpful methods to manipulate the state that are not used by the clients"
    note for InventoryState "Investigate Using RxPy for updating held_item in InventoryState"
    note "When using states, states should be private"
    